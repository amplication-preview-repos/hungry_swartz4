/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AnalysisReport as PrismaAnalysisReport } from "@prisma/client";

export class AnalysisReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalysisReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analysisReport.count(args);
  }

  async analysisReports(
    args: Prisma.AnalysisReportFindManyArgs
  ): Promise<PrismaAnalysisReport[]> {
    return this.prisma.analysisReport.findMany(args);
  }
  async analysisReport(
    args: Prisma.AnalysisReportFindUniqueArgs
  ): Promise<PrismaAnalysisReport | null> {
    return this.prisma.analysisReport.findUnique(args);
  }
  async createAnalysisReport(
    args: Prisma.AnalysisReportCreateArgs
  ): Promise<PrismaAnalysisReport> {
    return this.prisma.analysisReport.create(args);
  }
  async updateAnalysisReport(
    args: Prisma.AnalysisReportUpdateArgs
  ): Promise<PrismaAnalysisReport> {
    return this.prisma.analysisReport.update(args);
  }
  async deleteAnalysisReport(
    args: Prisma.AnalysisReportDeleteArgs
  ): Promise<PrismaAnalysisReport> {
    return this.prisma.analysisReport.delete(args);
  }
}
