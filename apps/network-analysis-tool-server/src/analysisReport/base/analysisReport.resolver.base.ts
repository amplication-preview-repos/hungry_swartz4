/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AnalysisReport } from "./AnalysisReport";
import { AnalysisReportCountArgs } from "./AnalysisReportCountArgs";
import { AnalysisReportFindManyArgs } from "./AnalysisReportFindManyArgs";
import { AnalysisReportFindUniqueArgs } from "./AnalysisReportFindUniqueArgs";
import { DeleteAnalysisReportArgs } from "./DeleteAnalysisReportArgs";
import { AnalysisReportService } from "../analysisReport.service";
@graphql.Resolver(() => AnalysisReport)
export class AnalysisReportResolverBase {
  constructor(protected readonly service: AnalysisReportService) {}

  async _analysisReportsMeta(
    @graphql.Args() args: AnalysisReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AnalysisReport])
  async analysisReports(
    @graphql.Args() args: AnalysisReportFindManyArgs
  ): Promise<AnalysisReport[]> {
    return this.service.analysisReports(args);
  }

  @graphql.Query(() => AnalysisReport, { nullable: true })
  async analysisReport(
    @graphql.Args() args: AnalysisReportFindUniqueArgs
  ): Promise<AnalysisReport | null> {
    const result = await this.service.analysisReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AnalysisReport)
  async deleteAnalysisReport(
    @graphql.Args() args: DeleteAnalysisReportArgs
  ): Promise<AnalysisReport | null> {
    try {
      return await this.service.deleteAnalysisReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
