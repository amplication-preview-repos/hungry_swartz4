/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnalysisReportService } from "../analysisReport.service";
import { AnalysisReportCreateInput } from "./AnalysisReportCreateInput";
import { AnalysisReport } from "./AnalysisReport";
import { AnalysisReportFindManyArgs } from "./AnalysisReportFindManyArgs";
import { AnalysisReportWhereUniqueInput } from "./AnalysisReportWhereUniqueInput";
import { AnalysisReportUpdateInput } from "./AnalysisReportUpdateInput";

export class AnalysisReportControllerBase {
  constructor(protected readonly service: AnalysisReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnalysisReport })
  async createAnalysisReport(
    @common.Body() data: AnalysisReportCreateInput
  ): Promise<AnalysisReport> {
    return await this.service.createAnalysisReport({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AnalysisReport] })
  @ApiNestedQuery(AnalysisReportFindManyArgs)
  async analysisReports(
    @common.Req() request: Request
  ): Promise<AnalysisReport[]> {
    const args = plainToClass(AnalysisReportFindManyArgs, request.query);
    return this.service.analysisReports({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnalysisReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async analysisReport(
    @common.Param() params: AnalysisReportWhereUniqueInput
  ): Promise<AnalysisReport | null> {
    const result = await this.service.analysisReport({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnalysisReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnalysisReport(
    @common.Param() params: AnalysisReportWhereUniqueInput,
    @common.Body() data: AnalysisReportUpdateInput
  ): Promise<AnalysisReport | null> {
    try {
      return await this.service.updateAnalysisReport({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnalysisReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnalysisReport(
    @common.Param() params: AnalysisReportWhereUniqueInput
  ): Promise<AnalysisReport | null> {
    try {
      return await this.service.deleteAnalysisReport({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
