/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NetworkTraffic as PrismaNetworkTraffic } from "@prisma/client";

export class NetworkTrafficServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NetworkTrafficCountArgs, "select">
  ): Promise<number> {
    return this.prisma.networkTraffic.count(args);
  }

  async networkTraffics(
    args: Prisma.NetworkTrafficFindManyArgs
  ): Promise<PrismaNetworkTraffic[]> {
    return this.prisma.networkTraffic.findMany(args);
  }
  async networkTraffic(
    args: Prisma.NetworkTrafficFindUniqueArgs
  ): Promise<PrismaNetworkTraffic | null> {
    return this.prisma.networkTraffic.findUnique(args);
  }
  async createNetworkTraffic(
    args: Prisma.NetworkTrafficCreateArgs
  ): Promise<PrismaNetworkTraffic> {
    return this.prisma.networkTraffic.create(args);
  }
  async updateNetworkTraffic(
    args: Prisma.NetworkTrafficUpdateArgs
  ): Promise<PrismaNetworkTraffic> {
    return this.prisma.networkTraffic.update(args);
  }
  async deleteNetworkTraffic(
    args: Prisma.NetworkTrafficDeleteArgs
  ): Promise<PrismaNetworkTraffic> {
    return this.prisma.networkTraffic.delete(args);
  }
}
