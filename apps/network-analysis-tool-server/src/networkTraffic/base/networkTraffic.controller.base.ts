/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NetworkTrafficService } from "../networkTraffic.service";
import { NetworkTrafficCreateInput } from "./NetworkTrafficCreateInput";
import { NetworkTraffic } from "./NetworkTraffic";
import { NetworkTrafficFindManyArgs } from "./NetworkTrafficFindManyArgs";
import { NetworkTrafficWhereUniqueInput } from "./NetworkTrafficWhereUniqueInput";
import { NetworkTrafficUpdateInput } from "./NetworkTrafficUpdateInput";

export class NetworkTrafficControllerBase {
  constructor(protected readonly service: NetworkTrafficService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NetworkTraffic })
  async createNetworkTraffic(
    @common.Body() data: NetworkTrafficCreateInput
  ): Promise<NetworkTraffic> {
    return await this.service.createNetworkTraffic({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NetworkTraffic] })
  @ApiNestedQuery(NetworkTrafficFindManyArgs)
  async networkTraffics(
    @common.Req() request: Request
  ): Promise<NetworkTraffic[]> {
    const args = plainToClass(NetworkTrafficFindManyArgs, request.query);
    return this.service.networkTraffics({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NetworkTraffic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async networkTraffic(
    @common.Param() params: NetworkTrafficWhereUniqueInput
  ): Promise<NetworkTraffic | null> {
    const result = await this.service.networkTraffic({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NetworkTraffic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNetworkTraffic(
    @common.Param() params: NetworkTrafficWhereUniqueInput,
    @common.Body() data: NetworkTrafficUpdateInput
  ): Promise<NetworkTraffic | null> {
    try {
      return await this.service.updateNetworkTraffic({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NetworkTraffic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNetworkTraffic(
    @common.Param() params: NetworkTrafficWhereUniqueInput
  ): Promise<NetworkTraffic | null> {
    try {
      return await this.service.deleteNetworkTraffic({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
